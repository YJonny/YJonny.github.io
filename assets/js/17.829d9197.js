(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{496:function(t,a,s){"use strict";s.r(a);var e=s(1),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"作用域定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域定义"}},[t._v("#")]),t._v(" 作用域定义")]),t._v(" "),s("p",[t._v("变量（变量作用于又称上下文）和函数生效（能被访问）的区域")]),t._v(" "),s("h3",{attrs:{id:"全局作用域和局部作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局作用域和局部作用域"}},[t._v("#")]),t._v(" 全局作用域和局部作用域")]),t._v(" "),s("p",[t._v("局部作用域可以访问全局作用域，即函数内部可以访问函数外部（变量），函数外部不能访问函数内部的，彼此独立的区间不能相互访问。")]),t._v(" "),s("h3",{attrs:{id:"函数作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数作用域"}},[t._v("#")]),t._v(" 函数作用域")]),t._v(" "),s("p",[t._v("每个函数内部都有一个叫[[scope]]的属性，当函数创建的时候就会保存所有的父变量对象到其中")]),t._v(" "),s("p",[t._v("作用域链：[[scope]]中所存储的执行期上下文对象的集合，这个集合呈链式链接，我们把这种链式链接叫做作用域链。当查找变量时，优先查找当前执行上下文，如果没有找到，则逐级向上查找，即向父级查找，直到全局上下文的变量，即全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。")]),t._v(" "),s("p",[t._v("运行期上下文: 当函数在执行的前一刻，会创建一个称为执行期上下文的内部对象。一个执行期上下文定义了一个函数执行时的环境，函数每次执行时对应的执行上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行上下文，当函数执行完毕，执行上下文被销毁。")])])}),[],!1,null,null,null);a.default=r.exports}}]);