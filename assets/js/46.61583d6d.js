(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{479:function(e,t,a){"use strict";a.r(t);var v=a(1),o=Object(v.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("在成都的办公地点有点难找，两个面试官，看起来成都这边是两个项目组的领导，一个是vue技术栈的，另外一个是React技术栈的。没有什么压迫力，体验不错。")]),e._v(" "),a("ol",[a("li",[e._v("自我介绍")]),e._v(" "),a("li",[e._v("为什么离职？")]),e._v(" "),a("li",[e._v("vue单向数据流？为什么v-model可以实现双向绑定\n"),a("blockquote",[a("p",[e._v("单向数据流，简而言之是model的改变导致view更新，view的更新不会触发model的改变，作用是单向的。"),a("br"),e._v('\nvue还是单向数据流，v-model只不过是语法糖，它是:value="sth"和@change="val => sth = val"的简写形式。')])])]),e._v(" "),a("li",[e._v("vue2.0中利用defineProperty怎么做到监听数组变化\n"),a("blockquote",[a("p",[e._v("先获取原生Array的方法，因为最后还是要靠原生方法来实现数组的变化\n对 Array 的原型方法使用 Object.defineProperty 做一些拦截操作\n把需要被拦截的 Array 类型的数据原型指向改造后原型")])])]),e._v(" "),a("li",[e._v("vue中v-for为什么要绑定key？为什么不用下标索引做key值\n"),a("blockquote",[a("p",[e._v("key能避免每次修改列表信息时渲染整个列表。当修改一条数据时，会根据key值找到对应的数据，然后做相应的渲染，其余数据将复用oldVnode。\n使用下标索引做key时，当在末尾添加一条数据时，前面的节点会被复用，只会渲染新添加的这条数据，这里看起来就很正常，然而，当这条被添加的数据不是在末尾呢？我们在列表中间插入这条数据，那么其他数据的key值将依次向后排，因为用的时索引，这时，patch执行时会认定这些数据也被改变了，就会重新渲染这些数据，这样就起不到提高性能的目的了")])])]),e._v(" "),a("li",[e._v("vue中data为什么要以函数形式返回")]),e._v(" "),a("li",[e._v("怎么将多个异步事件(api调用)同时返回")]),e._v(" "),a("li",[e._v("当一个异步事件依赖上一个异步事件的时候，怎么做到同步")]),e._v(" "),a("li",[e._v("promise，async/await，generator的差别\n"),a("blockquote",[a("p",[e._v("promise内部错误不能使用try...catch捕获，只能使用then的第二个回调或者catch来捕获。async/await可以使用try...catch来捕获错误\npromise一旦创建就会立即执行，不会阻塞后面代码。async函数中的await后面如果是promise对象就会阻塞后面代码\nasync/await是generator的语法糖，内置执行器\nasync/await隐式返回一个promise对象\nasync/await书写更美观简洁，不想promise一样需要不停的then")])])]),e._v(" "),a("li",[e._v("css清除浮动\n"),a("blockquote",[a("p",[e._v("使用空标签，带上clear：both\n使用overflow：hidden或者auto\n给浮动元素后面的元素添加clear属性\n添加一个看不见的伪元素:after，带上clear:both")])])]),e._v(" "),a("li",[e._v("bfc形成方式")]),e._v(" "),a("li",[e._v("脱离文档流的方式\n"),a("blockquote",[a("p",[e._v("float\nposition: absolute 和 fixed(relative不会脱离文档流)")])])]),e._v(" "),a("li",[e._v("函数式编程思想")])])])}),[],!1,null,null,null);t.default=o.exports}}]);